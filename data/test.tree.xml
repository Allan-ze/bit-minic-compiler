<?xml version="1.0" encoding="utf-8"?>
	<Program>
		<start>
			<external_declaration>
				<type_specifier>
					<int>int</int>
				</type_specifier>
				<identifier>max</identifier>
				<(>(</(>
				<function_declaration_list>
					<function_declaration>
						<type_specifier>
							<int>int</int>
						</type_specifier>
						<identifier>a</identifier>
					</function_declaration>
					<function_declaration_suffix>
						<,>,</,>
						<function_declaration>
							<type_specifier>
								<int>int</int>
							</type_specifier>
							<identifier>b</identifier>
						</function_declaration>
						<function_declaration_suffix/>
					</function_declaration_suffix>
				</function_declaration_list>
				<)>)</)>
				<compound_statement>
					<{>{</{>
					<statement_list>
						<statement>
							<selection_statement>
								<if>if</if>
								<(>(</(>
								<expression>
									<constant_expression>
										<primary_expression>
											<identifier>a</identifier>
										</primary_expression>
										<arithmetic_expression>
											<operator>
												<>>&gt;</>>
											</operator>
											<primary_expression>
												<identifier>b</identifier>
											</primary_expression>
											<arithmetic_expression/>
										</arithmetic_expression>
									</constant_expression>
								</expression>
								<)>)</)>
								<statement>
									<jump_statement>
										<return>return</return>
										<expression>
											<constant_expression>
												<primary_expression>
													<identifier>a</identifier>
												</primary_expression>
												<arithmetic_expression/>
											</constant_expression>
										</expression>
										<;>;</;>
									</jump_statement>
								</statement>
								<else>else</else>
								<statement>
									<jump_statement>
										<return>return</return>
										<expression>
											<constant_expression>
												<primary_expression>
													<identifier>b</identifier>
												</primary_expression>
												<arithmetic_expression/>
											</constant_expression>
										</expression>
										<;>;</;>
									</jump_statement>
								</statement>
							</selection_statement>
						</statement>
						<statement_list/>
					</statement_list>
					<}>}</}>
				</compound_statement>
			</external_declaration>
			<start>
				<external_declaration>
					<type_specifier>
						<double>double</double>
					</type_specifier>
					<identifier>min</identifier>
					<(>(</(>
					<function_declaration_list>
						<function_declaration>
							<type_specifier>
								<int>int</int>
							</type_specifier>
							<identifier>A</identifier>
						</function_declaration>
						<function_declaration_suffix>
							<,>,</,>
							<function_declaration>
								<type_specifier>
									<int>int</int>
								</type_specifier>
								<identifier>B</identifier>
							</function_declaration>
							<function_declaration_suffix/>
						</function_declaration_suffix>
					</function_declaration_list>
					<)>)</)>
					<compound_statement>
						<{>{</{>
						<statement_list>
							<statement>
								<selection_statement>
									<if>if</if>
									<(>(</(>
									<expression>
										<constant_expression>
											<primary_expression>
												<identifier>A</identifier>
											</primary_expression>
											<arithmetic_expression>
												<operator>
													<<>&lt;</<>
												</operator>
												<primary_expression>
													<identifier>B</identifier>
												</primary_expression>
												<arithmetic_expression/>
											</arithmetic_expression>
										</constant_expression>
									</expression>
									<)>)</)>
									<statement>
										<jump_statement>
											<return>return</return>
											<expression>
												<constant_expression>
													<primary_expression>
														<identifier>A</identifier>
													</primary_expression>
													<arithmetic_expression/>
												</constant_expression>
											</expression>
											<;>;</;>
										</jump_statement>
									</statement>
									<else>else</else>
									<statement>
										<jump_statement>
											<return>return</return>
											<expression>
												<constant_expression>
													<primary_expression>
														<identifier>B</identifier>
													</primary_expression>
													<arithmetic_expression/>
												</constant_expression>
											</expression>
											<;>;</;>
										</jump_statement>
									</statement>
								</selection_statement>
							</statement>
							<statement_list/>
						</statement_list>
						<}>}</}>
					</compound_statement>
				</external_declaration>
				<start>
					<external_declaration>
						<type_specifier>
							<int>int</int>
						</type_specifier>
						<identifier>main</identifier>
						<(>(</(>
						<function_declaration_list/>
						<)>)</)>
						<compound_statement>
							<{>{</{>
							<statement_list>
								<statement>
									<declaration>
										<type_specifier>
											<double>double</double>
										</type_specifier>
										<declaration_init>
											<identifier>sum_1_to_50</identifier>
											<declaration_assign>
												<=>=</=>
												<expression>
													<constant_expression>
														<primary_expression>
															<number>1</number>
														</primary_expression>
														<arithmetic_expression/>
													</constant_expression>
												</expression>
											</declaration_assign>
										</declaration_init>
										<declaration_init_list/>
										<;>;</;>
									</declaration>
								</statement>
								<statement_list>
									<statement>
										<iteration_statement>
											<for>for</for>
											<(>(</(>
											<declaration>
												<type_specifier>
													<int>int</int>
												</type_specifier>
												<declaration_init>
													<identifier>i</identifier>
													<declaration_assign>
														<=>=</=>
														<expression>
															<constant_expression>
																<primary_expression>
																	<number>1</number>
																</primary_expression>
																<arithmetic_expression/>
															</constant_expression>
														</expression>
													</declaration_assign>
												</declaration_init>
												<declaration_init_list/>
												<;>;</;>
											</declaration>
											<expression>
												<constant_expression>
													<primary_expression>
														<identifier>i</identifier>
													</primary_expression>
													<arithmetic_expression>
														<operator>
															<<>&lt;</<>
														</operator>
														<primary_expression>
															<number>100</number>
														</primary_expression>
														<arithmetic_expression/>
													</arithmetic_expression>
												</constant_expression>
											</expression>
											<;>;</;>
											<assignment_expression>
												<identifier>i</identifier>
												<assignment_operator>
													<+>+</+>
													<=>=</=>
												</assignment_operator>
												<expression>
													<constant_expression>
														<primary_expression>
															<number>1</number>
														</primary_expression>
														<arithmetic_expression/>
													</constant_expression>
												</expression>
											</assignment_expression>
											<)>)</)>
											<statement>
												<compound_statement>
													<{>{</{>
													<statement_list>
														<statement>
															<selection_statement>
																<if>if</if>
																<(>(</(>
																<expression>
																	<constant_expression>
																		<primary_expression>
																			<identifier>i</identifier>
																		</primary_expression>
																		<arithmetic_expression>
																			<operator>
																				<<>&lt;</<>
																			</operator>
																			<primary_expression>
																				<number>50</number>
																			</primary_expression>
																			<arithmetic_expression/>
																		</arithmetic_expression>
																	</constant_expression>
																</expression>
																<)>)</)>
																<statement>
																	<jump_statement>
																		<break>break</break>
																		<;>;</;>
																	</jump_statement>
																</statement>
																<else>else</else>
																<statement>
																	<compound_statement>
																		<{>{</{>
																		<statement_list>
																			<statement>
																				<jump_statement>
																					<continue>continue</continue>
																					<;>;</;>
																				</jump_statement>
																			</statement>
																			<statement_list/>
																		</statement_list>
																		<}>}</}>
																	</compound_statement>
																</statement>
															</selection_statement>
														</statement>
														<statement_list/>
													</statement_list>
													<}>}</}>
												</compound_statement>
											</statement>
										</iteration_statement>
									</statement>
									<statement_list>
										<statement>
											<iteration_statement>
												<while>while</while>
												<(>(</(>
												<expression>
													<constant_expression>
														<primary_expression>
															<identifier>k</identifier>
														</primary_expression>
														<arithmetic_expression>
															<operator>
																<<>&lt;</<>
															</operator>
															<primary_expression>
																<number>40</number>
															</primary_expression>
															<arithmetic_expression/>
														</arithmetic_expression>
													</constant_expression>
												</expression>
												<)>)</)>
												<statement>
													<compound_statement>
														<{>{</{>
														<statement_list>
															<statement>
																<expression_statement>
																	<scanf>scanf</scanf>
																	<(>(</(>
																	<identifier>s</identifier>
																	<)>)</)>
																	<;>;</;>
																</expression_statement>
															</statement>
															<statement_list/>
														</statement_list>
														<}>}</}>
													</compound_statement>
												</statement>
											</iteration_statement>
										</statement>
										<statement_list>
											<statement>
												<iteration_statement>
													<do>do</do>
													<statement>
														<compound_statement>
															<{>{</{>
															<statement_list>
																<statement>
																	<expression_statement>
																		<assignment_expression_list>
																			<assignment_expression>
																				<identifier>k</identifier>
																				<assignment_operator>
																					<->-</->
																					<=>=</=>
																				</assignment_operator>
																				<expression>
																					<constant_expression>
																						<primary_expression>
																							<number>1</number>
																						</primary_expression>
																						<arithmetic_expression/>
																					</constant_expression>
																				</expression>
																			</assignment_expression>
																			<assignment_expression_profix/>
																		</assignment_expression_list>
																		<;>;</;>
																	</expression_statement>
																</statement>
																<statement_list>
																	<statement>
																		<expression_statement>
																			<print>print</print>
																			<(>(</(>
																			<expression>
																				<constant_expression>
																					<primary_expression>
																						<identifier>s</identifier>
																					</primary_expression>
																					<arithmetic_expression/>
																				</constant_expression>
																			</expression>
																			<)>)</)>
																			<;>;</;>
																		</expression_statement>
																	</statement>
																	<statement_list/>
																</statement_list>
															</statement_list>
															<}>}</}>
														</compound_statement>
													</statement>
													<while>while</while>
													<(>(</(>
													<expression>
														<constant_expression>
															<primary_expression>
																<identifier>k</identifier>
															</primary_expression>
															<arithmetic_expression>
																<operator>
																	<>>&gt;</>>
																</operator>
																<primary_expression>
																	<number>20</number>
																</primary_expression>
																<arithmetic_expression/>
															</arithmetic_expression>
														</constant_expression>
													</expression>
													<)>)</)>
												</iteration_statement>
											</statement>
											<statement_list>
												<statement>
													<declaration>
														<type_specifier>
															<int>int</int>
														</type_specifier>
														<declaration_init>
															<identifier>k</identifier>
															<declaration_assign>
																<=>=</=>
																<expression>
																	<constant_expression>
																		<primary_expression>
																			<number>0</number>
																		</primary_expression>
																		<arithmetic_expression/>
																	</constant_expression>
																</expression>
															</declaration_assign>
														</declaration_init>
														<declaration_init_list>
															<,>,</,>
															<declaration_init>
																<identifier>s</identifier>
																<declaration_assign>
																	<=>=</=>
																	<expression>
																		<constant_expression>
																			<primary_expression>
																				<(>(</(>
																				<expression>
																					<constant_expression>
																						<primary_expression>
																							<(>(</(>
																							<expression>
																								<constant_expression>
																									<primary_expression>
																										<number>534</number>
																									</primary_expression>
																									<arithmetic_expression>
																										<operator>
																											<->-</->
																										</operator>
																										<primary_expression>
																											<number>23</number>
																										</primary_expression>
																										<arithmetic_expression/>
																									</arithmetic_expression>
																								</constant_expression>
																							</expression>
																							<)>)</)>
																						</primary_expression>
																						<arithmetic_expression>
																							<operator>
																								<+>+</+>
																							</operator>
																							<primary_expression>
																								<number>423</number>
																							</primary_expression>
																							<arithmetic_expression/>
																						</arithmetic_expression>
																					</constant_expression>
																				</expression>
																				<)>)</)>
																			</primary_expression>
																			<arithmetic_expression>
																				<operator>
																					<+>+</+>
																				</operator>
																				<primary_expression>
																					<number>23</number>
																				</primary_expression>
																				<arithmetic_expression>
																					<operator>
																						<*>*</*>
																					</operator>
																					<primary_expression>
																						<number>24</number>
																					</primary_expression>
																					<arithmetic_expression/>
																				</arithmetic_expression>
																			</arithmetic_expression>
																		</constant_expression>
																	</expression>
																</declaration_assign>
															</declaration_init>
															<declaration_init_list/>
														</declaration_init_list>
														<;>;</;>
													</declaration>
												</statement>
												<statement_list>
													<statement>
														<jump_statement>
															<return>return</return>
															<expression>
																<constant_expression>
																	<primary_expression>
																		<number>0</number>
																	</primary_expression>
																	<arithmetic_expression/>
																</constant_expression>
															</expression>
															<;>;</;>
														</jump_statement>
													</statement>
													<statement_list/>
												</statement_list>
											</statement_list>
										</statement_list>
									</statement_list>
								</statement_list>
							</statement_list>
							<}>}</}>
						</compound_statement>
					</external_declaration>
					<start/>
				</start>
			</start>
		</start>
	</Program>
